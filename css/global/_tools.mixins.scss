///*------------------------------------*\
//	#MIXINS
//\*------------------------------------*/


/**
 * Link Psuedo States
 * Can include the parent selector too if set to 'true'.
 */
@mixin link-states($parent: false) {
	
	@if ($parent){

		&,
		&:hover,
		&:active,
		&:focus {
			@content;
		}

	} @else {

		&:hover,
		&:active,
		&:focus {
			@content;
		}

	}

}





/**
 * Generate a list of heading tags and classes.
 *
 * [1] Create a placeholder that we will extend to.
 * [2] Check that only 1-6 is being requested and $from is smaller than $to.
 * [3] Loop through the range of $from and $to to generate and @extend the
 *     the correct classes to the placeholder.
 *
 */
@mixin headings($from: 1, $to: 6) {

	// [1]
	%heading-placeholder {
		@content;
	}

	// [2]
	@if $from >= 1 and $to <= 6 and $from <= $to {

		// [3]
		@for $heading from $from through $to {
 
			h#{$heading}, .h#{$heading} {
				@extend %heading-placeholder;
			}

		}

	}

}



/**
 * Unstyled List
 */
@mixin list-unstyled() {
	list-style: none;
	margin: 0;
	padding: 0;
}





/**
 * Hide's content in a screen reader friendly way.
 */
@mixin hide() {
    position: absolute !important;
    clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
    clip: rect(1px, 1px, 1px, 1px);
    padding:0 !important;
    border:0 !important;
    height: 1px !important;
    width: 1px !important;
    overflow: hidden;
}





/**
 * Hide text, good for Image Replacement
 */
@mixin hide-text() {
	border: 0;
	font: 0/0 a;
	text-shadow: none;
	color: transparent;
}





/**
 * Clearfix for modern browsers
 * 
 * [1] The space content is one way to avoid an Opera bug when the
 * contenteditable attribute is included anywhere else in the document.
 * Otherwise it causes space to appear at the top and bottom of elements
 * that are clearfixed.
 * 
 * [2] The use of `table` rather than `block` is only necessary if using
 * `:before` to contain the top-margins of child elements.
 * 
 */
@mixin clearfix() {

	&:before,
	&:after {
		content: " ";		// [1]
		display: table;		// [2]
	}
	&:after {
		clear: both;
	}

}





/**
 * Media Queries
 *
 * $breakpoints located in global/_variables.scss
 */
@mixin breakpoint($name) {

	@if map-has-key($breakpoints, $name) {
		@media #{inspect(map-get($breakpoints, $name))} {
			@content;
		}
	}

	@else {
		@warn "Couldn't find a breakpoint named `#{$name}`.";
	}

}





/**
 * High Resolution Media Querie
 */
@mixin high-res(){

	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
		@content;
	}

}




