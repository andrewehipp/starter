////
/// VARIABLES
////





///
// Base global defaults
///
$base-config: (
    'font-family':  sans-serif,
    'font-size':    14px,
    'line-height':  1.5
);





///
// Layout Configuration
//
// [1] Number of Layout Items per layout
// [2] Column Gutters, anything other than default builds out modifier classes
// [3] Generate offset modifier classes for layout items
// [4] Generate source ordering modifier classes for layout items
//
///
$layout-config: (
    'rows':          12,
    'gutters': (
        'default':   20px
    ),
    'offsets':       false,
    'push-and-pull': false
);



/// Generic spacing unit
$spacing-unit:      20px;




///
// Colors
///
$colors: (
    'primary':      #00587d,
    'secondary':    #fe7d36,
    'grey-25':      #bfbfbf,
    'grey-50':      #7f7f7f,
    'link':         'primary',
    'error':        #e43a35,
    'success':      #5cb85c
);





///
// Social Network's brand colors (just nice to have)
///
$social-networks: (
    'facebook':     #0e639e,
    'twitter':      #44c1ed,
    'pinterest':    #f00,
    'youtube':      #c90909
);



///
// Breakpoints
///
$breakpoints: (
    'xs':      480px,
    'sm':      768px,
    'md':     1024px,
    'lg':     1200px,
    'xl':     1500px,

    'short':   480px vertical,
    'medium':  768px vertical,
    'tall':   1024px vertical
);


$breakpoints-layout-config: ();

// Extended breakpoints for generating utility classes. Includes some defaults.
$breakpoints-extended-config: (
    'screen':   'screen',
    'print':    'print',
    'high-res': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'
);


// Get the keys for the breakpoints.
$breakpoint-keys: map-keys($breakpoints);

// Get a list of the breakpoints properties.
$breakpoint-props: map-values($breakpoints);

@each $breakpoint in $breakpoint-keys {

    // Index of position in list
    $index: index($breakpoint-keys, $breakpoint);

    // Properties of the current breakpoint
    $props: nth($breakpoint-props, $index);

    // The size should be the first one.
    $size: nth($props, 1);

    // Assume a width
    $direction: 'width';

    // Loop through and check id the breakpoint has a vertical property.
    @each $item in $props {
        @if($item == vertical) {

            // If so change to height
            $direction: 'height';
        }
    }

    // Add this breakpoint to the layout breakpoints
    @if $direction == 'width' {
        $breakpoints-layout-config: map-merge($breakpoints-layout-config, ('#{$breakpoint}': '(min-#{$direction}: #{$size})'));
    }

    // Generate Extended sizes
    $breakpoint-min: ('#{$breakpoint}': '(min-#{$direction}: #{$size})');
    $breakpoint-less-than: ('less-than-#{$breakpoint}': '(max-#{$direction}: #{$size - 1})');

    $breakpoints-extended-config: map-merge($breakpoints-extended-config, $breakpoint-min);
    $breakpoints-extended-config: map-merge($breakpoints-extended-config, $breakpoint-less-than);

    @if $index < length($breakpoint-keys) {

        $next-props: nth($breakpoint-props, $index + 1);
        $next-size: nth($next-props, 1);

        $next-direction: 'width';

        @each $item in $next-props {
            @if($item == vertical) {
                $next-direction: 'height';
            }
        }

        // Check to make sure this direction matches the next item's direction.
        // We don't want to mix vertical and horizontal
        @if $direction == $next-direction {

            $breakpoint-only: (
                '#{$breakpoint}-only': 'screen and (min-#{$direction}: #{$size}) and (max-#{$direction}: #{$next-size - 1})'
            );

            $breakpoints-extended-config: map-merge($breakpoints-extended-config, $breakpoint-only);

        }

    }

}





///
// Z-index Map for @function z();
///
$z-index: (
    'lightbox':     1000
);
