////
/// FUNCTIONS
////







///
/// Retrieve base default from sass map $base-config
///
/// @param {string} $property - Name of base default to return from $base-config.
///
/// @require {variable} $base-config
///
/// @ignore
/// [1] Check if $property exists in $base-config.
/// [2] If not pass an error.
///
@function base($property) {

    // [1]
    @if map-has-key($base-config, $property) {

        @return map-get($base-config, $property);

    } @else {

        @warn "'#{$property}' is not an available version of #{$base-config}. (#{map-keys($base-config)})"; // [2]

        @return null;

    }

}




///
/// Retrieve color from sass map $colors
///
/// @param {string} $color - Name of color to return from $colors.
///
/// @require {variable} $colors
///
/// @ignore
/// [1] Either get the $color from $colors if it exists OR keep the original $color
/// [2] Recursively call $color if it's in $colors or keep $color
///
@function color($color) {

    // [1]
    $color: map-get($colors, $color) or $color;

    // [2]
    $color: if(map-has-key($colors, $color), color($color), $color);

    @return $color;

}





///
/// Retrieve z-index value from sass map $z-index
///
/// @param {string} $element - Element to return z-index value from $z-index.
///
/// @require {variable} $z-index
///
/// @ignore
/// [1] Check if $element exists in $z-index.
/// [2] If not pass an error.
///
@function z($element) {

    // [1]
    @if map-has-key($z-index, $element) {

        @return map-get($z-index, $element);

    } @else {

        @warn "'#{$element}' does not have a value set in  #{$z-index}. (#{map-keys($z-index)})"; // [2]

        @return null;

    }

}

///
/// Return EM value
///
/// @param {pixel} $px - Target equivalent pixel value to output as ems.
/// @param {pixel} $base [$base-font-size] - Base pixel value to calculate against.
///
/// @require {variable} $base-config
///
@function em($px, $base: map-get($base-config, 'font-size')) {

    @return ($px / $base) * 1em;

}





///
/// Returns the number as a negative.
///
/// @param {number} $number
///
@function negative($number) {
    @return -($number);
}

/// @alias negative
@function neg($args...) {
    @return negative($args...);
}


///
/// Returns number as rounded half the number passed.
///
/// @param {number} $number
///
@function halve($number) {
    @return round($number / 2);
}

/// @alias halve
@function half($args...) {
    @return halve($args...);
}


///
/// Returns number as rounded quarter the number passed.
///
/// @param {number} $number
///
@function quarter($number) {
    @return round($number / 4);
}

/// @alias quarter
@function fourth($args...) {
    @return quarter($args...);
}


///
/// Returns as double the number passed.
///
/// @param {number} $number
///
@function double($number) {
    @return $number * 2;
}


///
/// Returns as triple the number passed.
///
/// @param {number} $number
///
@function triple($number) {
    @return $number * 3;
}


///
/// Returns as quadruple the number passed.
///
/// @param {number} $number
///
@function quadruple($number) {
    @return $number * 4;
}





///
/// Returns as the base spacing unit times the number passed.
///
/// @param {number} $number
///
@function spacer($number: 1) {
    @return round($number * $spacing-unit);
}

/// Spacer Function
/// @param {List} $args - List of numbers or numbers
/// @return {List} - Returns a list of up to four numbers.
@function spacer($args...) {
  
    // Limit of 4 args.
    @if length($args) < 5 {

        @warn 'Spacer() accepts a maximum of four properties just like `padding` and `margin`';
        @return null;

    } @else {
    
        // Make a list to contain our values.
        $props: ();

        // The user can pass no parameters and just get back $spacing-unit.
        @if length($args) == 0 {
            @return $spacing-unit;
        }

        // For each parameter passed check if it's a variable (custom amount) and use that
        @each $arg in $args {
            
            // If the passed propety has units, just use it.
            @if unitless($arg) {
                $arg: $arg * $spacing-unit;
            }

            $props: append($props, $arg);

        }  

        @return $props;

    }

}
