/*------------------------------------*\
    #LAYOUT
\*------------------------------------*/

///
// Layout Configuration
//
// [1] Number of Layout Items per layout
// [2] Column Gutters, anything other than default builds out modifier classes
// [3] Generate offset modifier classes for layout items
// [4] Generate source ordering modifier classes for layout items
///

$layout-config: (
    'rows':          12,
    'gutters': (
        'default':   20px
    ),
    'offsets':       false,
    'push-and-pull': false
);


// Store $layout-config map as variables...
$layout-gutters:        map-get($layout-config, 'gutters');
$layout-rows:           map-get($layout-config, 'rows');
$layout-offsets:        map-get($layout-config, 'offsets');
$layout-push-and-pull:  map-get($layout-config, 'push-and-pull');




/**
 * Layout row
 *
 * [1] Additional modifier classes for layout gutters.
 */

.o-layout {
    @include clearfix;
    margin-right: neg(halve(map-get($layout-gutters, 'default')));
    margin-left:  neg(halve(map-get($layout-gutters, 'default')));
}

// [1]
@each $layout-gutter, $layout-gutter-value in $layout-gutters {

    // Skip the default value.
    @if ($layout-gutter != 'default') {

        .o-layout--#{$layout-gutter} {
            margin-right:  neg(halve($layout-gutter-value));
            margin-left:   neg(halve($layout-gutter-value));
        }

    }

}


/**
 * A layout item, used like a column
 *
 * [1] Additional modifier classes for layout gutters.
 */

.o-layout__item {
    position: relative;
    width: 100%;
    float: left;
    min-height: 1px;
    padding-right:  halve(map-get($layout-gutters, 'default'));
    padding-left:   halve(map-get($layout-gutters, 'default'));

    // [1]
    @each $layout-gutter, $layout-gutter-value in $layout-gutters {

        // Skip the default value.
        @if ($layout-gutter != 'default') {

            .o-layout--#{$layout-gutter} > & {
                padding-right:  halve($layout-gutter-value);
                padding-left:   halve($layout-gutter-value);
            }

        }

    }

}

/**
 * Layout Columns
 */
@for $layout-item-span from 1 through $layout-rows {

    .o-layout__item--#{$layout-item-span} {
        width: (100% / $layout-rows) * $layout-item-span;
    }

}


/**
 * Do the same as above but for each breakpoint
 */
@each $breakpoint, $media-querie in $breakpoints-layout-config {

    @include breakpoint($breakpoint) {

        @for $layout-item-span from 1 through $layout-rows {

            .o-layout__item--#{$layout-item-span}\@#{$breakpoint} {
                width: (100% / $layout-rows) * $layout-item-span;
            }

        }

    }

}




// Conditionally output layout offsets.
@if $layout-offsets {

    /**
     * Offset modifiers for layout items.
     */
    @for $layout-item-span from 1 through $layout-rows {

        .o-layout__item--offset-#{$layout-item-span} {
            margin-left: (100% / $layout-rows) * $layout-item-span;
        }

    }

    /**
     * Offset modifiers for layout items at each breakpoint
     */
    @each $breakpoint, $media-querie in $breakpoints-layout-config {

        @include breakpoint($breakpoint) {

            @for $layout-item-span from 1 through $layout-rows {

                .o-layout__item--offset-#{$layout-item-span}\@#{$breakpoint} {
                    margin-left: (100% / $layout-rows) * $layout-item-span;
                }

            }

        }

    }

}





// Conditionally output layout source ordering.
@if $layout-push-and-pull {

    /**
     * Push and Pull modifiers for layout items.
     */
    @for $layout-item-span from 1 through $layout-rows {

        .o-layout__item--push-#{$layout-item-span} {
            left: (100% / $layout-rows) * $layout-item-span;
        }

        .o-layout__item--pull-#{$layout-item-span} {
            left: negative((100% / $layout-rows) * $layout-item-span);
        }

    }

    /**
     * Do the same as above but for each breakpoint
     */
    @each $breakpoint, $media-querie in $breakpoints-layout-config {

        @include breakpoint($breakpoint) {

            @for $layout-item-span from 1 through $layout-rows {

                .o-layout__item--push-#{$layout-item-span}\@#{$breakpoint} {
                    left: (100% / $layout-rows) * $layout-item-span;
                }

                .o-layout__item--pull-#{$layout-item-span}\@#{$breakpoint} {
                    left: negative((100% / $layout-rows) * $layout-item-span);
                }

            }

        }

    }

}
