@charset "UTF-8";
.o-layout, .o-layout__item {
  position: relative;
  outline: 1px solid #f00; }
  .o-layout:after, .o-layout__item:after {
    width: 100%;
    padding: 5px 10px;
    font-size: 14px;
    line-height: 1.2;
    background: #f00;
    outline: 1px solid #f00;
    color: #fff;
    position: absolute;
    left: 0;
    bottom: 100%; }

.o-layout:after {
  /**
                     * If we have a replacement selector, tell people what it is.
                     */
  content: 'Warning: Selector `.o-layout` is deprecated, use `.o-grid` instead.'; }

.o-layout__item:after {
  /**
                     * If we have a replacement selector, tell people what it is.
                     */
  content: 'Warning: Selector `.o-layout__item` is deprecated, use `.o-grid__column` instead.'; }

/**
     * If an element has a class attribute containing two hyphens but no space
     * (i.e. only one class is being used, and it’s a Modifier), provide visual
     * feedback in the DOM.
     *
     * N.B. This isn’t bulletproof: `class="foo--bar baz"` would pass, as would
     * `class=" foo--bar"`. Use with a pinch of salt.
     */
[class*="--"]:not([class*=" "]) {
  position: relative;
  outline: 1px solid #f00; }
  [class*="--"]:not([class*=" "]):after {
    content: 'Error: Cannot have a Modifier (i.e. `.' attr(class) '`) without a Block.';
    background: #fff;
    color: #f00;
    font-family: monospace;
    white-space: nowrap;
    position: absolute;
    bottom: 100%;
    left: 0; }

/*------------------------------------*\
    #BORDER BOX
\*------------------------------------*/
/**
 * Apply global border box.
 */
*, *:before, *:after {
  box-sizing: inherit; }

html {
  box-sizing: border-box; }

/*------------------------------------*\
    #CUSTOM FONTS
\*------------------------------------*/
/**
 * List custom fonts
 */
/*------------------------------------*\
    #PAGE
\*------------------------------------*/
/**
 * Body
 */
body {
  background: #fff;
  color: #000;
  font-family: sans-serif;
  font-size: 14px;
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

/*------------------------------------*\
    #TYPOGRAPY
\*------------------------------------*/
/**
 * Headings
 *
 * In most cases you should avoid styling a specific heading type to have
 * custom distinct styles that would apply to all headings of that type.
 * Instead create a new component like c-heading or c-title. This may not
 * be the case when a CMS needs default headings to appear a specific way.
 */
h1, h2, h3, h4, h5, h6 {
  margin: 0 0 20px;
  line-height: 1.5; }

h1 {
  font-size: 1.57143em; }
  @media (min-width: 768px) {
    h1 {
      font-size: 2.57143em; } }

h2 {
  font-size: 1.42857em; }
  @media (min-width: 768px) {
    h2 {
      font-size: 2.14286em; } }

h3 {
  font-size: 1.28571em; }
  @media (min-width: 768px) {
    h3 {
      font-size: 1.71429em; } }

h4 {
  font-size: 1.14286em; }
  @media (min-width: 768px) {
    h4 {
      font-size: 1.28571em; } }

h5 {
  font-size: 1em; }

h6 {
  font-size: 0.85714em; }

/**
 * Paragraphs
 */
p {
  margin: 0 0 20px; }

/**
 * Lists
 */
ul, ol, dl {
  margin: 0 0 20px; }

/**
 * Link Styles
 */
a {
  color: #337ab7;
  text-decoration: none; }
  a:hover, a:active, a:focus {
    text-decoration: underline; }

/**
 * Horizontal Rule
 */
hr {
  margin: 0 0 20px;
  border: solid #bfbfbf;
  border-width: 0 0 1px; }

/*------------------------------------*\
    #IMAGES
\*------------------------------------*/
/**
 * [1] remove spacing below inline images.
 */
img {
  vertical-align: middle;
  margin: 0 0 20px; }

/**
 * Figure
 */
figure {
  margin: 0 0 20px; }

figcaption {
  font-size: 0.85714em;
  font-style: italic; }

/*------------------------------------*\
    #FORMS
\*------------------------------------*/
input, textarea, select {
  border: 1px solid #bfbfbf;
  border-radius: 0;
  background: #fff; }

/*------------------------------------*\
    #WRAP
\*------------------------------------*/
/**
 * A simple wrapper that crops all content that bleeds out of it
 * Usefull for preventing scrolling on the body.
 */
.o-wrap {
  overflow: hidden; }

/*------------------------------------*\
    #CONTAINER
\*------------------------------------*/
/**
 * An outer container for site content. A container should never be a child of
 * instance of it's self.
 */
.o-container {
  padding: 0 20px;
  margin: 0 auto;
  max-width: 1280px; }

/*------------------------------------*\
    #LIST UNSTYLED
\*------------------------------------*/
/**
 * Remove list styling from list
 */
.o-list-unstyled {
  list-style: none;
  margin: 0;
  padding: 0; }

/*------------------------------------*\
    #LIST INLINE
\*------------------------------------*/
/**
 * List with direct children displaying inline.
 * [1] All items except the first have padding.
 */
.o-list-inline {
  list-style: none;
  margin: 0;
  padding: 0; }
  .o-list-inline > li {
    display: inline-block;
    vertical-align: middle; }

/*------------------------------------*\
    #ISLAND
\*------------------------------------*/
/**
 * Add a nice gap below a block of content.
 */
.o-island {
  margin-bottom: 60px; }

/*------------------------------------*\
    #LAYOUT
\*------------------------------------*/
/**
 * Layout row
 *
 * [1] Additional modifier classes for layout gutters.
 */
.o-grid {
  margin-right: -8px;
  margin-left: -8px; }
  .o-grid:before, .o-grid:after {
    content: ' ';
    display: table; }
  .o-grid:after {
    clear: both; }
  @media (min-width: 1024px) {
    .o-grid {
      margin-right: -15px;
      margin-left: -15px; } }

.o-grid--initial {
  margin-right: -15px;
  margin-left: -15px; }

/**
 * A layout item, used like a column
 *
 * [1] Additional modifier classes for layout gutters.
 */
.o-grid__column {
  position: relative;
  padding-right: 8px;
  padding-left: 8px;
  width: 100%;
  min-height: 1px;
  float: left; }
  @media (min-width: 1024px) {
    .o-grid__column {
      padding-right: 15px;
      padding-left: 15px; } }
  .o-grid--initial > .o-grid__column {
    padding-right: 15px;
    padding-left: 15px; }

/**
 * Layout Columns
 */
.o-grid__column--1 {
  width: 8.33333%; }

.o-grid__column--2 {
  width: 16.66667%; }

.o-grid__column--3 {
  width: 25%; }

.o-grid__column--4 {
  width: 33.33333%; }

.o-grid__column--5 {
  width: 41.66667%; }

.o-grid__column--6 {
  width: 50%; }

.o-grid__column--7 {
  width: 58.33333%; }

.o-grid__column--8 {
  width: 66.66667%; }

.o-grid__column--9 {
  width: 75%; }

.o-grid__column--10 {
  width: 83.33333%; }

.o-grid__column--11 {
  width: 91.66667%; }

.o-grid__column--12 {
  width: 100%; }

@media (min-width: 480px) {
  .o-grid__column--1\@xs {
    width: 8.33333%; }
  .o-grid__column--2\@xs {
    width: 16.66667%; }
  .o-grid__column--3\@xs {
    width: 25%; }
  .o-grid__column--4\@xs {
    width: 33.33333%; }
  .o-grid__column--5\@xs {
    width: 41.66667%; }
  .o-grid__column--6\@xs {
    width: 50%; }
  .o-grid__column--7\@xs {
    width: 58.33333%; }
  .o-grid__column--8\@xs {
    width: 66.66667%; }
  .o-grid__column--9\@xs {
    width: 75%; }
  .o-grid__column--10\@xs {
    width: 83.33333%; }
  .o-grid__column--11\@xs {
    width: 91.66667%; }
  .o-grid__column--12\@xs {
    width: 100%; } }

@media (min-width: 768px) {
  .o-grid__column--1\@sm {
    width: 8.33333%; }
  .o-grid__column--2\@sm {
    width: 16.66667%; }
  .o-grid__column--3\@sm {
    width: 25%; }
  .o-grid__column--4\@sm {
    width: 33.33333%; }
  .o-grid__column--5\@sm {
    width: 41.66667%; }
  .o-grid__column--6\@sm {
    width: 50%; }
  .o-grid__column--7\@sm {
    width: 58.33333%; }
  .o-grid__column--8\@sm {
    width: 66.66667%; }
  .o-grid__column--9\@sm {
    width: 75%; }
  .o-grid__column--10\@sm {
    width: 83.33333%; }
  .o-grid__column--11\@sm {
    width: 91.66667%; }
  .o-grid__column--12\@sm {
    width: 100%; } }

@media (min-width: 1024px) {
  .o-grid__column--1\@md {
    width: 8.33333%; }
  .o-grid__column--2\@md {
    width: 16.66667%; }
  .o-grid__column--3\@md {
    width: 25%; }
  .o-grid__column--4\@md {
    width: 33.33333%; }
  .o-grid__column--5\@md {
    width: 41.66667%; }
  .o-grid__column--6\@md {
    width: 50%; }
  .o-grid__column--7\@md {
    width: 58.33333%; }
  .o-grid__column--8\@md {
    width: 66.66667%; }
  .o-grid__column--9\@md {
    width: 75%; }
  .o-grid__column--10\@md {
    width: 83.33333%; }
  .o-grid__column--11\@md {
    width: 91.66667%; }
  .o-grid__column--12\@md {
    width: 100%; } }

@media (min-width: 1200px) {
  .o-grid__column--1\@lg {
    width: 8.33333%; }
  .o-grid__column--2\@lg {
    width: 16.66667%; }
  .o-grid__column--3\@lg {
    width: 25%; }
  .o-grid__column--4\@lg {
    width: 33.33333%; }
  .o-grid__column--5\@lg {
    width: 41.66667%; }
  .o-grid__column--6\@lg {
    width: 50%; }
  .o-grid__column--7\@lg {
    width: 58.33333%; }
  .o-grid__column--8\@lg {
    width: 66.66667%; }
  .o-grid__column--9\@lg {
    width: 75%; }
  .o-grid__column--10\@lg {
    width: 83.33333%; }
  .o-grid__column--11\@lg {
    width: 91.66667%; }
  .o-grid__column--12\@lg {
    width: 100%; } }

@media (min-width: 1500px) {
  .o-grid__column--1\@xl {
    width: 8.33333%; }
  .o-grid__column--2\@xl {
    width: 16.66667%; }
  .o-grid__column--3\@xl {
    width: 25%; }
  .o-grid__column--4\@xl {
    width: 33.33333%; }
  .o-grid__column--5\@xl {
    width: 41.66667%; }
  .o-grid__column--6\@xl {
    width: 50%; }
  .o-grid__column--7\@xl {
    width: 58.33333%; }
  .o-grid__column--8\@xl {
    width: 66.66667%; }
  .o-grid__column--9\@xl {
    width: 75%; }
  .o-grid__column--10\@xl {
    width: 83.33333%; }
  .o-grid__column--11\@xl {
    width: 91.66667%; }
  .o-grid__column--12\@xl {
    width: 100%; } }

/*------------------------------------*\
    #ASPECT
\*------------------------------------*/
/**
 * Enforce an aspect ratio on a responsive image before the page loads. Uses
 * the same trick as responsive videos.
 *
 * [1] Hide any access overflow of the image in case it doesn't quite fit.
 * [2] Padding 100% creates a square by default.
 */
.o-aspect {
  overflow: hidden;
  margin-bottom: 20px;
  padding-top: 100%;
  width: 100%;
  position: relative; }
  .o-aspect > img {
    margin: 0;
    width: 100%;
    height: auto;
    position: absolute;
    top: 0;
    left: 0; }

/**
 * Loop throught the config and build out aditional sizes.
 */
.o-aspect--2x1 {
  padding-top: 50%; }

/*------------------------------------*\
    #MEDIA
\*------------------------------------*/
/**
 * A generic layout with an item floated to the side and content block that
 * doesn't wrap underneath it.
 */
.o-media:before, .o-media:after {
  content: ' ';
  display: table; }
.o-media:after {
  clear: both; }

/**
 * Side element floats left and pushes content away. Stacks on mobile.
 *
 * [1] Flip the image to the right with modifier
 */
.o-media__graphic {
  display: block; }
  @media (min-width: 480px) {
    .o-media__graphic {
      margin-right: 20px;
      float: left; } }
  @media (min-width: 480px) {
    .o-media--flip .o-media__graphic {
      margin: 0 0 0 20px;
      float: right; } }

/**
 * Content Block
 */
.o-media__content {
  overflow: hidden; }

/*------------------------------------*\
    #LOGOS
\*------------------------------------*/
/**
 * Logo base class. Applies shared properties for all logos.
 *
 * [1] Relies on background-size to shrink large logos to smaller sizes.
 */
.c-logo {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  display: inline-block;
  vertical-align: middle;
  background: center no-repeat;
  background-size: contain; }

.c-logo--sample {
  width: 150px;
  height: 75px;
  background-image: url('http://satyr.io/150x75?text=Logo'); }

.c-logo--responsive {
  width: 80px;
  height: 48px;
  background-image: url('http://satyr.io/200x120?text=Logo'); }
  @media (min-width: 768px) {
    .c-logo--responsive {
      width: 150px;
      height: 90px; } }
  @media (min-width: 1024px) {
    .c-logo--responsive {
      width: 200px;
      height: 120px; } }

/*------------------------------------*\
    #FORM GROUP
\*------------------------------------*/
/**
 * A form group block
 */
.c-form-group {
  margin-bottom: 10px; }

.c-form-group__label {
  display: block;
  cursor: pointer;
  padding: 5px 0;
  transition: color 0.15s; }
  .c-form-group.has-error .c-form-group__label {
    color: #f00; }

/**
 * Form group inputs
 *
 * [1] When the form input is nested in a comment, like with a radio button or
 * checkbox, set the input to display inline with the label's text.
 */
.c-form-group__input {
  display: block;
  padding: 0.71429em;
  margin-bottom: 10px;
  width: 100%;
  font-family: sans-serif;
  font-size: 14px;
  line-height: 1.2;
  transition: border 0.15s; }
  .c-form-group__label .c-form-group__input {
    margin: 0 5px 0 0; }
  .c-form-group.has-error .c-form-group__input {
    border-color: #f00; }

.c-form-group__input--inline {
  display: inline-block;
  width: auto; }

/**
 * Generic text block to add text after a field, used with validation elements.
 */
.c-form-group__help-block {
  display: block;
  font-size: 0.85714em;
  margin: 0 0 20px; }

/**
 * Validation element to be used with help-block's. Behavior classes on the
 * parent determine what type of validation it is.
 */
.c-form-group__validation {
  display: block;
  padding: 0.71429em;
  border: 1px solid #bfbfbf;
  background-color: #e5e5e5;
  color: #7f7f7f;
  font-weight: bold;
  position: relative;
  transition: 0.15s; }
  .c-form-group.has-error .c-form-group__validation {
    border-color: #f00;
    background-color: #ff4d4d;
    color: #fff; }

/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/
/**
 * Base button class, extended by modifiers.
 */
.c-btn {
  display: inline-block;
  padding: 0.71429em 1.42857em;
  border: 0;
  color: #337ab7;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  transition: 0.15s; }

/**
 * Modifiers for the buttons
 */
.c-btn--primary {
  background: #337ab7;
  color: #fff; }

/*------------------------------------*\
    #NAVIGATION
\*------------------------------------*/
/**
 * Navigation list
 */
.c-nav__list:before, .c-nav__list:after {
  content: ' ';
  display: table; }
.c-nav__list:after {
  clear: both; }

/**
 * Navigation List item
 *
 * [1] Stateful 'current' version of navigation item.
 */
.c-nav__item {
  margin-right: 10px;
  float: left; }

/**
 * Navigation link
 */
.c-nav__link {
  display: block;
  color: #337ab7; }
  .c-nav__item.is-current .c-nav__link {
    text-decoration: underline; }

/*------------------------------------*\
    #HEADER
\*------------------------------------*/
.c-header {
  padding: 20px 0;
  margin-bottom: 20px; }

/*------------------------------------*\
    #FOOTER
\*------------------------------------*/
.c-footer {
  padding: 20px 0; }

/*------------------------------------*\
    #TEXT UTILITES
\*------------------------------------*/
/**
 * Font size utilities, by default it uses the same sizes as the tags
 */
.u-h1 {
  font-size: 1.57143em; }
  @media (min-width: 768px) {
    .u-h1 {
      font-size: 2.57143em; } }

.u-h2 {
  font-size: 1.42857em; }
  @media (min-width: 768px) {
    .u-h2 {
      font-size: 2.14286em; } }

.u-h3 {
  font-size: 1.28571em; }
  @media (min-width: 768px) {
    .u-h3 {
      font-size: 1.71429em; } }

.u-h4 {
  font-size: 1.14286em; }
  @media (min-width: 768px) {
    .u-h4 {
      font-size: 1.28571em; } }

.u-h5 {
  font-size: 1em; }

.u-h6 {
  font-size: 0.85714em; }

/**
 * Text Alignment
 */
.u-text-center {
  text-align: center; }

/*------------------------------------*\
    #IMAGE UTILITIES
\*------------------------------------*/
/**
 * Image's max width conforms to the parent's width.
 */
.u-img-respond {
  max-width: 100%;
  height: auto; }

/**
 * Image matches it's containers width
 */
.u-img-full {
  width: 100%;
  height: auto; }

/*------------------------------------*\
    #VISIBILITY UTILITIES
\*------------------------------------*/
/**
 * Visibility classes for all breakpoints
 */
.u-hidden {
  display: none; }
@media (min-width: 480px) {
  .u-hidden\@xs {
    display: none; } }
@media (min-width: 768px) {
  .u-hidden\@sm {
    display: none; } }
@media (min-width: 1024px) {
  .u-hidden\@md {
    display: none; } }
@media (min-width: 1200px) {
  .u-hidden\@lg {
    display: none; } }
@media (min-width: 1500px) {
  .u-hidden\@xl {
    display: none; } }

/**
 * Screen Readers only
 */
.u-sr-only {
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  width: 1px;
  padding: 0;
  border: 0;
  position: absolute; }

/*------------------------------------*\
    #COLOR UTILITES
\*------------------------------------*/
/**
 * Color utilities to force a specific color.
 */
.u-color-link {
  color: #337ab7; }

.u-color-grey {
  color: #7f7f7f; }


/*# sourceMappingURL=data:application/json;base64, */