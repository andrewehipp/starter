module.exports = gulp;


/*------------------------------------*\
    Packages
\*------------------------------------*/

/**
 * $ is an object generated by the devDependencies in package.json
 */
var gulp =      require('gulp'),
    $ =           require('gulp-load-plugins')({
                  pattern: '*',
                  replaceString: /\bgulp[\-.]/
                });





/*------------------------------------*\
    BROWSER SYNC
\*------------------------------------*/

gulp.task('browser-sync', function() {
    $.browserSync({
        proxy: 'localhost/starter',
        notify: false
    });
});





/*------------------------------------*\
    SPRITE
\*------------------------------------*/

// Support retina, but requires retina sized images in source folder

gulp.task('sprite', function () {

    return gulp.src('img/sprite/*.png')
        .pipe($.cssSprite.stream({
            name: 'sprite',
            style: '_component.sprite.scss',
            cssPath: '../img/',
            processor: 'scss',
            //retina: true,
            prefix: 'sprite'
        }))
        .pipe($.if('*.png', gulp.dest('img/'), gulp.dest('css/global/')));

});





/*------------------------------------*\
    CSS
\*------------------------------------*/

gulp.task('sass', function() {

    return gulp.src('css/**/*.scss')
        .pipe($.plumber())
        .pipe($.sourcemaps.init())
        .pipe($.sass())
        .pipe($.autoprefixer('last 2 versions'))
        //.pipe($.combineMediaQueries({
        //  log: true
        //}))
        .pipe($.sourcemaps.write())
        .pipe(gulp.dest('css'))
        .pipe($.browserSync.reload({stream:true}));

});


/**
 * Production.min.css
 */
gulp.task('css', ['sass'], function(){

    gulp.src([
            'css/global.css'
        ])
        .pipe($.plumber())
        .pipe($.concat('production.min.css'))
        .pipe($.minifyCss())
        .pipe(gulp.dest('dist'));


});





/*------------------------------------*\
    JS
\*------------------------------------*/

/**
 * Lint the main js file. jshint-stylish provides nice output
 */
gulp.task('lint', function() {

    return gulp.src('js/main.js')
        .pipe($.jshint())
        .pipe($.jshint.reporter('jshint-stylish'));

});


/**
 * Build Production.min.js
 */
gulp.task('js', ['lint'], function(){

    return gulp.src('js/*.js')
        .pipe($.plumber())
        .pipe($.concat('production.min.js'))
        .pipe($.uglify())
        .pipe(gulp.dest('dist'))
        .pipe($.browserSync.reload({stream:true}));

});





/*------------------------------------*\
      SASSDOC
\*------------------------------------*/

gulp.task('sassdoc', function () {

    return gulp.src('css/**/*.scss')
        .pipe($.sassdoc());

});





/*------------------------------------*\
    WATCH
\*------------------------------------*/

gulp.task('watch', ['default'], function() {

    $.watch('css/**/*.scss', function () {
        gulp.start('css');
    });

    $.watch('img/sprite/*', function () {
        gulp.start('sprite');
    });

    $.watch('js/*.js', function () {
        gulp.start('js');
    });

    $.watch('*.html', function () {
        gulp.src('*.html')
            .pipe($.browserSync.reload({stream:true}));
    });

});





/*------------------------------------*\
    DEFAULT
\*------------------------------------*/

gulp.task('default', ['sprite', 'css', 'js', 'browser-sync']);
