module.exports = gulp;


/*------------------------------------*\
	Packages
\*------------------------------------*/

/**
 * $ is an object generated by the dependencies in package.json, it contains
 * only 'gulp-' plugins.
 */
var gulp =			require('gulp'),
	del =			require('del'),
	browserSync =	require('browser-sync'),
	reload =		browserSync.reload,
	sprite =		require('css-sprite').stream,
	$ =				require('gulp-load-plugins')();






/*------------------------------------*\
	CLEAN
\*------------------------------------*/

gulp.task('clean', function() {

	del([
		'.sass-cache',
		'css/_*', // BrowserSync creates a directory to hold file's it injects
		'dist'
	], function (err, deletedFiles) {
		console.log('Files deleted:', deletedFiles.join(', '));
	});

});





/*------------------------------------*\
	BROWSER SYNC
\*------------------------------------*/

gulp.task('browser-sync', function() {
	browserSync({
		proxy: 'localhost/starter',
		notify: false
	});
});






/*------------------------------------*\
	SPRITE
\*------------------------------------*/

gulp.task('sprite', function () {

	return gulp.src('img/sprite/*.png')
		.pipe(sprite({
			//retina: true, // Support retina, but requires retina sized images
			name: 'sprite',
			style: '_component.sprite.scss',
			cssPath: '../img/',
			processor: 'scss',
			prefix: 'sprite'
		}))
		.pipe($.if('*.png', gulp.dest('img/'), gulp.dest('css/global/')));

});






/*------------------------------------*\
	CSS
\*------------------------------------*/

gulp.task('sass', function() {
	
	return gulp.src('css/**/*.scss')
		.pipe($.plumber())
		.pipe($.rubySass({ 'sourcemap=none': true }))
		.pipe($.autoprefixer('last 2 versions'))
		//.pipe($.combineMediaQueries({
		//	log: true
		//}))
		.pipe(gulp.dest('css'))
		.pipe(reload({stream:true}));

});


/**
 * Production.min.css
 */
gulp.task('css', ['sass'], function(){

	gulp.src([
			'css/global.css'
		])
		.pipe($.plumber())
		.pipe($.concat('production.min.css'))
		.pipe($.minifyCss())
		.pipe(gulp.dest('dist'));


});





/*------------------------------------*\
	JS
\*------------------------------------*/

/**
 * Lint the main js file. jshint-stylish provides nice output
 */
gulp.task('lint', function() {

	return gulp.src('js/main.js')
		.pipe($.jshint())
		.pipe($.jshint.reporter('jshint-stylish'));

});


/**
 * Build Production.min.js
 */
gulp.task('js', ['lint'], function(){

	return gulp.src('js/*.js')
		.pipe($.plumber())
		.pipe($.concat('production.min.js'))
		.pipe($.uglify())
		.pipe(gulp.dest('dist'))
				.pipe(reload({stream:true}));

});





/*------------------------------------*\
	WATCH
\*------------------------------------*/

gulp.task('watch', ['default'], function() {

	$.watch('css/**/*.scss', function () {
		gulp.start('css');
	});

	$.watch('img/sprite/*', function () {
		gulp.start('sprite');
	});

	$.watch('js/*.js', function () {
		gulp.start('js');
	});

	$.watch('*.html', function () {
		gulp.src('*.html')
			.pipe(reload({stream:true}));
	});

});





/*------------------------------------*\
	DEFAULT
\*------------------------------------*/

gulp.task('default', ['clean', 'sprite', 'css', 'js', 'browser-sync']);

